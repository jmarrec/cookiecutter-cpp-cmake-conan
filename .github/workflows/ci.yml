name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    name: "Run tests"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install compiler tools
        shell: bash
        run: |
          pip install conan
          conan config set general.revisions_enabled=True && conan config set general.parallel_download=8

          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update -qq && sudo apt install -y ninja-build ccache cppcheck

            # Weirdly enough, ninja makes ubuntu unresponsive...
            echo CMAKE_GENERATOR='Ninja' >> $GITHUB_ENV
            gcc --version
            conan profile new --detect default &&\
            conan profile update settings.compiler.libcxx=libstdc++11 default

          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "Using chocolatey to install ninja"
            choco install ninja cppcheck
            # C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
            MSVC_DIR=$(cmd.exe /c "vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath -latest")
            echo "Latest is: $MSVC_DIR"
            echo "MSVC_DIR=$MSVC_DIR" >> $GITHUB_ENV
            # add folder containing vcvarsall.bat
            echo "$MSVC_DIR\VC\Auxiliary\Build" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "Using brew to install ninja"
            brew install ninja ccache cppcheck
            echo CMAKE_GENERATOR='Ninja' >> $GITHUB_ENV
            ln -sf $(brew --prefix llvm@14)/bin/clang-tidy /usr/bin/clang-tidy
          fi;

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          pytest

      - name: Run tests
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Using vcvarsall to initialize the development environment"
          call vcvarsall.bat x64
          pytest
