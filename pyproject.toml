# pyproject.toml
[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py37', 'py38', 'py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files like this:
#skip_glob = docs/conf.py

[tool.pytest.ini_options]
minversion = "6.0"
# # Shows a line for every test
# # You probably want to turn this off if you use pytest-sugar.
# # Or you can keep it and run `py.test -q`.
# --verbose
#
# # Shorter tracebacks are sometimes easier to read
# --tb=short
# #--tb=long
#
# # Find worrysome warnings by throwing on them
# # -W error::FutureWarning
# # -W error::DeprecationWarning
#
# # Turn on --capture to have brief, less noisy output.
# # You will only see output if the test fails.
# # Use --capture no (same as -s) if you want to see it all or have problems
# # debugging.
# # --capture=fd
# # --capture=no
#
# # Show extra test summary info as specified by chars (f)ailed, (E)error, (s)skipped, (x)failed, (X)passed.
# -rfEsxX
#
# # Output test results to junit.xml for Pipelines to consume
# # has to be in a specially named directory like test-reports, and with a depth of 3 levels: ./**/test-reports/**/*.xml
# --junitxml=tests/test-reports/junit/junit.xml
#
# # Measure code coverage for all files in the module itself and the tests folder
# --cov='hooks'
# --cov='tests'
# # Include lines missed in coverage
# --cov-report=term-missing
# Coverage is pointless really here, since the hooks stuff is rendered to another file before it's executed

addopts = "--verbose --tb=short -rfEsxX"
norecursedirs = [".tox", ".git", ".github", "*/migrations/*", "*/static/*", "docs", "venv", "*/{{cookiecutter.project_slug}}/*"]
testpaths = [
    "tests",
    "integration",
]
